{*
 * Copyright (C) 2024 Mikulas Patocka
 *
 * This file is part of Ajla.
 *
 * Ajla is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Ajla is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Ajla. If not, see <https://www.gnu.org/licenses/>.
 *}

private unit compiler.parser.util;

uses pcode;

fn get_call_mode(l : list(bytes), fn_def : bool) : int;
fn blob_generate(blob : bytes) : list(pcode_t);
fn blob_decode(p : list(pcode_t)) : bytes;
fn blob_get_length(p : list(pcode_t)) : int;

implementation

fn get_call_mode(l : list(bytes), fn_def : bool) : int
[
	var call_mode := Call_Mode_Unspecified;
	for i := 0 to len(l) do [
		var s := l[i];
		if s = "normal" then call_mode := Call_Mode_Normal;
		else if s = "strict" then call_mode := Call_Mode_Strict;
		else if s = "spark" then call_mode := Call_Mode_Spark;
		else if s = "lazy" then call_mode := Call_Mode_Lazy;
		else if s = "inline" then call_mode := Call_Mode_Inline;
		else if s = "cache" then call_mode := Call_Mode_Cache;
		else if s = "save" then call_mode := Call_Mode_Save;
		else if s = "type", fn_def then call_mode := Call_Mode_Type;
		else if s = "flat", fn_def then call_mode := Call_Mode_Flat;
	]
	return call_mode;
]

fn blob_generate(blob : bytes) : list(pcode_t)
[
	var result := list(pcode_t).[ len(blob) ];
	var val : pcode_t := 0;
	for i := 0 to len(blob) do [
		var b : pcode_t := blob[i];
		val or= b shl ((i and 3) * 8);
		if i mod 4 = 3 then [
			result +<= val;
			val := 0;
		]
	]
	if (len(blob) and 3) <> 0 then [
		result +<= val;
	]
	return result;
]

fn blob_decode(p : list(pcode_t)) : bytes
[
	var result := empty(byte);
	var val : pcode_t := 0;
	for i := 0 to p[0] do [
		if (i and 3) = 0 then
			val := p[1 + (i shr 2)];
		result +<= val and #ff;
		val shr= 8;
	]
	return result;
]

fn blob_get_length(p : list(pcode_t)) : int
[
	var p0 : int := p[0];
	return p0 + 7 shr 2;
]
