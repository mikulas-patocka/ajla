{*
 * Copyright (C) 2024 Mikulas Patocka
 *
 * This file is part of Ajla.
 *
 * Ajla is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Ajla is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Ajla. If not, see <https://www.gnu.org/licenses/>.
 *}

uses charset;

fn spctab(b : byte) : bool := b = ' ' or b = '	' or b = '-';

fn main(implicit w : world, d : dhandle, h : list(handle), args : list(bytes), env : treemap(bytes, bytes)) : world
[
	var dh := dopen(d, "scripts/charset", 0);
	var lz := dread_lazy(dh);

	for name in lz do [
		if not list_ends_with(name, ".cp") then
			continue;
		//write(h[1], name + nl);
		var cpx_name := name[ .. len(name) - 3] + ".cpx";
		var cpx := list_break_to_lines(read_lazy(ropen_lazy(d, path_append("scripts/charset", cpx_name), 0)));
		var label := cpx[0];
		var mime_name := cpx[1];
		var normalized_name := charset_name_normalize(mime_name);
		var file_name := normalized_name;
		if len(file_name) > 8 then
			file_name := file_name[ .. 3] + "_" + file_name[len(file_name) - 4 .. ];
		file_name += ".c8";

		var table := array_fill(char, 0, [256]);
		var chs := list_break_to_lines(read_lazy(ropen_lazy(d, path_append("scripts/charset", name), 0)));
		for line in chs do [
			if line = "" or line[0] = '#' or line[0] = 26 then
				continue;
			var broken := list_break_whitespace(line);
			if broken[0][ .. 2] <> "0x" then
				abort;
			if list_search(broken[0], '-') >= 0 then
				continue;
			var ccode := ston_base(broken[0][2 .. ], 16);
			if ccode < #80 then
				continue;

			if broken[1] = "0" or broken[1][0] = '#' then
				continue;
			if broken[1][ .. 2] <> "0x" then
				abort;
			var ucode := ston_base(broken[1][2 .. ], 16);
			if ucode >= #80, ucode < #a0 then
				continue;
			table[ccode] := ucode;
		]

		var tstr := "";
		tstr += label + bytes.[0];
		tstr += mime_name + bytes.[0];
		for i := 128 to 256 do [
			tstr +<= table[i] and #ff;
			tstr +<= (table[i] shr 8) and #ff;
			tstr +<= (table[i] shr 16) and #ff;
		]

		var wh := wopen(d, path_append("charsets", file_name), open_flag_create, open_mode_default);
		write(wh, tstr);
	]
]
